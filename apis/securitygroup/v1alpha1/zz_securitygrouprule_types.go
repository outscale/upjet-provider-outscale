/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OutboundRulesSecurityGroupsMembersObservation struct {
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	SecurityGroupName *string `json:"securityGroupName,omitempty" tf:"security_group_name,omitempty"`
}

type OutboundRulesSecurityGroupsMembersParameters struct {
}

type RulesObservation struct {
}

type RulesParameters struct {

	// +kubebuilder:validation:Optional
	FromPortRange *float64 `json:"fromPortRange,omitempty" tf:"from_port_range,omitempty"`

	// +kubebuilder:validation:Optional
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// +kubebuilder:validation:Optional
	IPRanges []*string `json:"ipRanges,omitempty" tf:"ip_ranges,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupsMembers []RulesSecurityGroupsMembersParameters `json:"securityGroupsMembers,omitempty" tf:"security_groups_members,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceIds []*string `json:"serviceIds,omitempty" tf:"service_ids,omitempty"`

	// +kubebuilder:validation:Optional
	ToPortRange *float64 `json:"toPortRange,omitempty" tf:"to_port_range,omitempty"`
}

type RulesSecurityGroupsMembersObservation struct {
}

type RulesSecurityGroupsMembersParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +crossplane:generate:reference:type=SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Reference to a SecurityGroup to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDRef *v1.Reference `json:"securityGroupIdRef,omitempty" tf:"-"`

	// Selector for a SecurityGroup to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDSelector *v1.Selector `json:"securityGroupIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SecurityGroupName *string `json:"securityGroupName,omitempty" tf:"security_group_name,omitempty"`
}

type SecurityGroupRuleInboundRulesObservation struct {
	FromPortRange *float64 `json:"fromPortRange,omitempty" tf:"from_port_range,omitempty"`

	IPRanges []*string `json:"ipRanges,omitempty" tf:"ip_ranges,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupsMembers []SecurityGroupsMembersObservation `json:"securityGroupsMembers,omitempty" tf:"security_groups_members,omitempty"`

	ServiceIds []*string `json:"serviceIds,omitempty" tf:"service_ids,omitempty"`

	ToPortRange *float64 `json:"toPortRange,omitempty" tf:"to_port_range,omitempty"`
}

type SecurityGroupRuleInboundRulesParameters struct {

	// +kubebuilder:validation:Optional
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupsMembers []SecurityGroupsMembersParameters `json:"securityGroupsMembers,omitempty" tf:"security_groups_members,omitempty"`
}

type SecurityGroupRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	InboundRules []SecurityGroupRuleInboundRulesObservation `json:"inboundRules,omitempty" tf:"inbound_rules,omitempty"`

	NetID *string `json:"netId,omitempty" tf:"net_id,omitempty"`

	// +kubebuilder:validation:Optional
	OutboundRules []SecurityGroupRuleOutboundRulesObservation `json:"outboundRules,omitempty" tf:"outbound_rules,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	SecurityGroupName *string `json:"securityGroupName,omitempty" tf:"security_group_name,omitempty"`
}

type SecurityGroupRuleOutboundRulesObservation struct {
	FromPortRange *float64 `json:"fromPortRange,omitempty" tf:"from_port_range,omitempty"`

	IPRanges []*string `json:"ipRanges,omitempty" tf:"ip_ranges,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupsMembers []OutboundRulesSecurityGroupsMembersObservation `json:"securityGroupsMembers,omitempty" tf:"security_groups_members,omitempty"`

	ServiceIds []*string `json:"serviceIds,omitempty" tf:"service_ids,omitempty"`

	ToPortRange *float64 `json:"toPortRange,omitempty" tf:"to_port_range,omitempty"`
}

type SecurityGroupRuleOutboundRulesParameters struct {

	// +kubebuilder:validation:Optional
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupsMembers []OutboundRulesSecurityGroupsMembersParameters `json:"securityGroupsMembers,omitempty" tf:"security_groups_members,omitempty"`
}

type SecurityGroupRuleParameters struct {

	// +kubebuilder:validation:Required
	Flow *string `json:"flow" tf:"flow,omitempty"`

	// +kubebuilder:validation:Optional
	FromPortRange *float64 `json:"fromPortRange,omitempty" tf:"from_port_range,omitempty"`

	// +kubebuilder:validation:Optional
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// +kubebuilder:validation:Optional
	IPRange *string `json:"ipRange,omitempty" tf:"ip_range,omitempty"`

	// +kubebuilder:validation:Optional
	InboundRules []SecurityGroupRuleInboundRulesParameters `json:"inboundRules,omitempty" tf:"inbound_rules,omitempty"`

	// +kubebuilder:validation:Optional
	OutboundRules []SecurityGroupRuleOutboundRulesParameters `json:"outboundRules,omitempty" tf:"outbound_rules,omitempty"`

	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupAccountIDToLink *string `json:"securityGroupAccountIdToLink,omitempty" tf:"security_group_account_id_to_link,omitempty"`

	// +crossplane:generate:reference:type=SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Reference to a SecurityGroup to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDRef *v1.Reference `json:"securityGroupIdRef,omitempty" tf:"-"`

	// Selector for a SecurityGroup to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDSelector *v1.Selector `json:"securityGroupIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SecurityGroupNameToLink *string `json:"securityGroupNameToLink,omitempty" tf:"security_group_name_to_link,omitempty"`

	// +kubebuilder:validation:Optional
	ToPortRange *float64 `json:"toPortRange,omitempty" tf:"to_port_range,omitempty"`
}

type SecurityGroupsMembersObservation struct {
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	SecurityGroupName *string `json:"securityGroupName,omitempty" tf:"security_group_name,omitempty"`
}

type SecurityGroupsMembersParameters struct {
}

// SecurityGroupRuleSpec defines the desired state of SecurityGroupRule
type SecurityGroupRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityGroupRuleParameters `json:"forProvider"`
}

// SecurityGroupRuleStatus defines the observed state of SecurityGroupRule.
type SecurityGroupRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityGroupRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityGroupRule is the Schema for the SecurityGroupRules API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type SecurityGroupRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityGroupRuleSpec   `json:"spec"`
	Status            SecurityGroupRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityGroupRuleList contains a list of SecurityGroupRules
type SecurityGroupRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityGroupRule `json:"items"`
}

// Repository type metadata.
var (
	SecurityGroupRule_Kind             = "SecurityGroupRule"
	SecurityGroupRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityGroupRule_Kind}.String()
	SecurityGroupRule_KindAPIVersion   = SecurityGroupRule_Kind + "." + CRDGroupVersion.String()
	SecurityGroupRule_GroupVersionKind = CRDGroupVersion.WithKind(SecurityGroupRule_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityGroupRule{}, &SecurityGroupRuleList{})
}
