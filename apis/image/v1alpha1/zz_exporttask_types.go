/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExportTaskObservation struct {
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Progress *float64 `json:"progress,omitempty" tf:"progress,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TaskID *string `json:"taskId,omitempty" tf:"task_id,omitempty"`
}

type ExportTaskParameters struct {

	// +crossplane:generate:reference:type=Image
	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Reference to a Image to populate imageId.
	// +kubebuilder:validation:Optional
	ImageIDRef *v1.Reference `json:"imageIdRef,omitempty" tf:"-"`

	// Selector for a Image to populate imageId.
	// +kubebuilder:validation:Optional
	ImageIDSelector *v1.Selector `json:"imageIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	OsuExport []OsuExportParameters `json:"osuExport" tf:"osu_export,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []ExportTaskTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ExportTaskTagsObservation struct {
}

type ExportTaskTagsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OsuAPIKeyObservation struct {
}

type OsuAPIKeyParameters struct {

	// +kubebuilder:validation:Required
	APIKeyID *string `json:"apiKeyId" tf:"api_key_id,omitempty"`

	// +kubebuilder:validation:Required
	SecretKey *string `json:"secretKey" tf:"secret_key,omitempty"`
}

type OsuExportObservation struct {
}

type OsuExportParameters struct {

	// +kubebuilder:validation:Required
	DiskImageFormat *string `json:"diskImageFormat" tf:"disk_image_format,omitempty"`

	// +kubebuilder:validation:Optional
	OsuAPIKey []OsuAPIKeyParameters `json:"osuApiKey,omitempty" tf:"osu_api_key,omitempty"`

	// +kubebuilder:validation:Required
	OsuBucket *string `json:"osuBucket" tf:"osu_bucket,omitempty"`

	// +kubebuilder:validation:Optional
	OsuManifestURL *string `json:"osuManifestUrl,omitempty" tf:"osu_manifest_url,omitempty"`

	// +kubebuilder:validation:Optional
	OsuPrefix *string `json:"osuPrefix,omitempty" tf:"osu_prefix,omitempty"`
}

// ExportTaskSpec defines the desired state of ExportTask
type ExportTaskSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ExportTaskParameters `json:"forProvider"`
}

// ExportTaskStatus defines the observed state of ExportTask.
type ExportTaskStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ExportTaskObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ExportTask is the Schema for the ExportTasks API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type ExportTask struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ExportTaskSpec   `json:"spec"`
	Status            ExportTaskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExportTaskList contains a list of ExportTasks
type ExportTaskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ExportTask `json:"items"`
}

// Repository type metadata.
var (
	ExportTask_Kind             = "ExportTask"
	ExportTask_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ExportTask_Kind}.String()
	ExportTask_KindAPIVersion   = ExportTask_Kind + "." + CRDGroupVersion.String()
	ExportTask_GroupVersionKind = CRDGroupVersion.WithKind(ExportTask_Kind)
)

func init() {
	SchemeBuilder.Register(&ExportTask{}, &ExportTaskList{})
}
