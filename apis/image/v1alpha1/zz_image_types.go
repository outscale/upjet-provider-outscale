/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BlockDeviceMappingsObservation struct {
}

type BlockDeviceMappingsParameters struct {

	// +kubebuilder:validation:Optional
	Bsu []BsuParameters `json:"bsu,omitempty" tf:"bsu,omitempty"`

	// +kubebuilder:validation:Optional
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualDeviceName *string `json:"virtualDeviceName,omitempty" tf:"virtual_device_name,omitempty"`
}

type BsuObservation struct {
}

type BsuParameters struct {

	// +kubebuilder:validation:Optional
	DeleteOnVMDeletion *bool `json:"deleteOnVmDeletion,omitempty" tf:"delete_on_vm_deletion,omitempty"`

	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeSize *float64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type ImageObservation struct {
	AccountAlias *string `json:"accountAlias,omitempty" tf:"account_alias,omitempty"`

	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	ImageType *string `json:"imageType,omitempty" tf:"image_type,omitempty"`

	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	PermissionsToLaunch []PermissionsToLaunchObservation `json:"permissionsToLaunch,omitempty" tf:"permissions_to_launch,omitempty"`

	ProductCodes []*string `json:"productCodes,omitempty" tf:"product_codes,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	RootDeviceType *string `json:"rootDeviceType,omitempty" tf:"root_device_type,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	StateComment []StateCommentObservation `json:"stateComment,omitempty" tf:"state_comment,omitempty"`
}

type ImageParameters struct {

	// +kubebuilder:validation:Optional
	Architecture *string `json:"architecture,omitempty" tf:"architecture,omitempty"`

	// +kubebuilder:validation:Optional
	BlockDeviceMappings []BlockDeviceMappingsParameters `json:"blockDeviceMappings,omitempty" tf:"block_device_mappings,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	FileLocation *string `json:"fileLocation,omitempty" tf:"file_location,omitempty"`

	// +kubebuilder:validation:Optional
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// +kubebuilder:validation:Optional
	NoReboot *bool `json:"noReboot,omitempty" tf:"no_reboot,omitempty"`

	// +kubebuilder:validation:Optional
	RootDeviceName *string `json:"rootDeviceName,omitempty" tf:"root_device_name,omitempty"`

	// +crossplane:generate:reference:type=Image
	// +kubebuilder:validation:Optional
	SourceImageID *string `json:"sourceImageId,omitempty" tf:"source_image_id,omitempty"`

	// Reference to a Image to populate sourceImageId.
	// +kubebuilder:validation:Optional
	SourceImageIDRef *v1.Reference `json:"sourceImageIdRef,omitempty" tf:"-"`

	// Selector for a Image to populate sourceImageId.
	// +kubebuilder:validation:Optional
	SourceImageIDSelector *v1.Selector `json:"sourceImageIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SourceRegionName *string `json:"sourceRegionName,omitempty" tf:"source_region_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// +crossplane:generate:reference:type=github.com/outscale-vbr/upjet-provider-outscale/apis/vm/v1alpha1.Vm
	// +kubebuilder:validation:Optional
	VMID *string `json:"vmId,omitempty" tf:"vm_id,omitempty"`

	// Reference to a Vm in vm to populate vmId.
	// +kubebuilder:validation:Optional
	VMIDRef *v1.Reference `json:"vmIdRef,omitempty" tf:"-"`

	// Selector for a Vm in vm to populate vmId.
	// +kubebuilder:validation:Optional
	VMIDSelector *v1.Selector `json:"vmIdSelector,omitempty" tf:"-"`
}

type PermissionsToLaunchObservation struct {
	AccountIds []*string `json:"accountIds,omitempty" tf:"account_ids,omitempty"`

	GlobalPermission *bool `json:"globalPermission,omitempty" tf:"global_permission,omitempty"`
}

type PermissionsToLaunchParameters struct {
}

type StateCommentObservation struct {
	StateCode *string `json:"stateCode,omitempty" tf:"state_code,omitempty"`

	StateMessage *string `json:"stateMessage,omitempty" tf:"state_message,omitempty"`
}

type StateCommentParameters struct {
}

type TagsObservation struct {
}

type TagsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// ImageSpec defines the desired state of Image
type ImageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageParameters `json:"forProvider"`
}

// ImageStatus defines the observed state of Image.
type ImageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Image is the Schema for the Images API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type Image struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImageSpec   `json:"spec"`
	Status            ImageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageList contains a list of Images
type ImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Image `json:"items"`
}

// Repository type metadata.
var (
	Image_Kind             = "Image"
	Image_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Image_Kind}.String()
	Image_KindAPIVersion   = Image_Kind + "." + CRDGroupVersion.String()
	Image_GroupVersionKind = CRDGroupVersion.WithKind(Image_Kind)
)

func init() {
	SchemeBuilder.Register(&Image{}, &ImageList{})
}
