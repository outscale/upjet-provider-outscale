/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LaunchPermissionObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PermissionsToLaunch []LaunchPermissionPermissionsToLaunchObservation `json:"permissionsToLaunch,omitempty" tf:"permissions_to_launch,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`
}

type LaunchPermissionParameters struct {

	// +crossplane:generate:reference:type=Image
	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Reference to a Image to populate imageId.
	// +kubebuilder:validation:Optional
	ImageIDRef *v1.Reference `json:"imageIdRef,omitempty" tf:"-"`

	// Selector for a Image to populate imageId.
	// +kubebuilder:validation:Optional
	ImageIDSelector *v1.Selector `json:"imageIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PermissionAdditions []PermissionAdditionsParameters `json:"permissionAdditions,omitempty" tf:"permission_additions,omitempty"`

	// +kubebuilder:validation:Optional
	PermissionRemovals []PermissionRemovalsParameters `json:"permissionRemovals,omitempty" tf:"permission_removals,omitempty"`
}

type LaunchPermissionPermissionsToLaunchObservation struct {
	AccountIds []*string `json:"accountIds,omitempty" tf:"account_ids,omitempty"`

	GlobalPermission *string `json:"globalPermission,omitempty" tf:"global_permission,omitempty"`
}

type LaunchPermissionPermissionsToLaunchParameters struct {
}

type PermissionAdditionsObservation struct {
}

type PermissionAdditionsParameters struct {

	// +kubebuilder:validation:Optional
	AccountIds []*string `json:"accountIds,omitempty" tf:"account_ids,omitempty"`

	// +kubebuilder:validation:Optional
	GlobalPermission *string `json:"globalPermission,omitempty" tf:"global_permission,omitempty"`
}

type PermissionRemovalsObservation struct {
}

type PermissionRemovalsParameters struct {

	// +kubebuilder:validation:Optional
	AccountIds []*string `json:"accountIds,omitempty" tf:"account_ids,omitempty"`

	// +kubebuilder:validation:Optional
	GlobalPermission *string `json:"globalPermission,omitempty" tf:"global_permission,omitempty"`
}

// LaunchPermissionSpec defines the desired state of LaunchPermission
type LaunchPermissionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LaunchPermissionParameters `json:"forProvider"`
}

// LaunchPermissionStatus defines the observed state of LaunchPermission.
type LaunchPermissionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LaunchPermissionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LaunchPermission is the Schema for the LaunchPermissions API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type LaunchPermission struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LaunchPermissionSpec   `json:"spec"`
	Status            LaunchPermissionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LaunchPermissionList contains a list of LaunchPermissions
type LaunchPermissionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LaunchPermission `json:"items"`
}

// Repository type metadata.
var (
	LaunchPermission_Kind             = "LaunchPermission"
	LaunchPermission_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LaunchPermission_Kind}.String()
	LaunchPermission_KindAPIVersion   = LaunchPermission_Kind + "." + CRDGroupVersion.String()
	LaunchPermission_GroupVersionKind = CRDGroupVersion.WithKind(LaunchPermission_Kind)
)

func init() {
	SchemeBuilder.Register(&LaunchPermission{}, &LaunchPermissionList{})
}
