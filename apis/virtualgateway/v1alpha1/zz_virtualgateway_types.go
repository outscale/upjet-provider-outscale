/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetToVirtualGatewayLinksObservation struct {
	NetID *string `json:"netId,omitempty" tf:"net_id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type NetToVirtualGatewayLinksParameters struct {
}

type TagsObservation struct {
}

type TagsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type VirtualGatewayObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	NetToVirtualGatewayLinks []NetToVirtualGatewayLinksObservation `json:"netToVirtualGatewayLinks,omitempty" tf:"net_to_virtual_gateway_links,omitempty"`
}

type VirtualGatewayParameters struct {

	// +kubebuilder:validation:Required
	ConnectionType *string `json:"connectionType" tf:"connection_type,omitempty"`

	// +kubebuilder:validation:Optional
	NetToVirtualGatewayLinks []NetToVirtualGatewayLinksParameters `json:"netToVirtualGatewayLinks,omitempty" tf:"net_to_virtual_gateway_links,omitempty"`

	// +kubebuilder:validation:Optional
	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualGatewayID *string `json:"virtualGatewayId,omitempty" tf:"virtual_gateway_id,omitempty"`
}

// VirtualGatewaySpec defines the desired state of VirtualGateway
type VirtualGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualGatewayParameters `json:"forProvider"`
}

// VirtualGatewayStatus defines the observed state of VirtualGateway.
type VirtualGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualGateway is the Schema for the VirtualGateways API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type VirtualGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualGatewaySpec   `json:"spec"`
	Status            VirtualGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualGatewayList contains a list of VirtualGateways
type VirtualGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualGateway `json:"items"`
}

// Repository type metadata.
var (
	VirtualGateway_Kind             = "VirtualGateway"
	VirtualGateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualGateway_Kind}.String()
	VirtualGateway_KindAPIVersion   = VirtualGateway_Kind + "." + CRDGroupVersion.String()
	VirtualGateway_GroupVersionKind = CRDGroupVersion.WithKind(VirtualGateway_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtualGateway{}, &VirtualGatewayList{})
}
