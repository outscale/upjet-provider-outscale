/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeypairObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	KeypairFingerprint *string `json:"keypairFingerprint,omitempty" tf:"keypair_fingerprint,omitempty"`

	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`
}

type KeypairParameters struct {

	// +kubebuilder:validation:Optional
	KeypairName *string `json:"keypairName,omitempty" tf:"keypair_name,omitempty"`

	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

// KeypairSpec defines the desired state of Keypair
type KeypairSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeypairParameters `json:"forProvider"`
}

// KeypairStatus defines the observed state of Keypair.
type KeypairStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeypairObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Keypair is the Schema for the Keypairs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type Keypair struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeypairSpec   `json:"spec"`
	Status            KeypairStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeypairList contains a list of Keypairs
type KeypairList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Keypair `json:"items"`
}

// Repository type metadata.
var (
	Keypair_Kind             = "Keypair"
	Keypair_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Keypair_Kind}.String()
	Keypair_KindAPIVersion   = Keypair_Kind + "." + CRDGroupVersion.String()
	Keypair_GroupVersionKind = CRDGroupVersion.WithKind(Keypair_Kind)
)

func init() {
	SchemeBuilder.Register(&Keypair{}, &KeypairList{})
}
