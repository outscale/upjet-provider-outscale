/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouteObservation struct {
	CreationMethod *string `json:"creationMethod,omitempty" tf:"creation_method,omitempty"`

	DestinationServiceID *string `json:"destinationServiceId,omitempty" tf:"destination_service_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	NATAccessPoint *string `json:"natAccessPoint,omitempty" tf:"nat_access_point,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	VMAccountID *string `json:"vmAccountId,omitempty" tf:"vm_account_id,omitempty"`
}

type RouteParameters struct {

	// +kubebuilder:validation:Optional
	AwaitActiveState *bool `json:"awaitActiveState,omitempty" tf:"await_active_state,omitempty"`

	// +kubebuilder:validation:Required
	DestinationIPRange *string `json:"destinationIpRange" tf:"destination_ip_range,omitempty"`

	// +crossplane:generate:reference:type=github.com/outscale-vbr/upjet-provider-outscale/apis/internetservice/v1alpha1.InternetService
	// +kubebuilder:validation:Optional
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Reference to a InternetService in internetservice to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDRef *v1.Reference `json:"gatewayIdRef,omitempty" tf:"-"`

	// Selector for a InternetService in internetservice to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDSelector *v1.Selector `json:"gatewayIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/outscale-vbr/upjet-provider-outscale/apis/nat/v1alpha1.Nat
	// +kubebuilder:validation:Optional
	NATServiceID *string `json:"natServiceId,omitempty" tf:"nat_service_id,omitempty"`

	// Reference to a Nat in nat to populate natServiceId.
	// +kubebuilder:validation:Optional
	NATServiceIDRef *v1.Reference `json:"natServiceIdRef,omitempty" tf:"-"`

	// Selector for a Nat in nat to populate natServiceId.
	// +kubebuilder:validation:Optional
	NATServiceIDSelector *v1.Selector `json:"natServiceIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	NetPeeringID *string `json:"netPeeringId,omitempty" tf:"net_peering_id,omitempty"`

	// +kubebuilder:validation:Optional
	NicID *string `json:"nicId,omitempty" tf:"nic_id,omitempty"`

	// +crossplane:generate:reference:type=github.com/outscale-vbr/upjet-provider-outscale/apis/routetable/v1alpha1.RouteTable
	// +kubebuilder:validation:Optional
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// Reference to a RouteTable in routetable to populate routeTableId.
	// +kubebuilder:validation:Optional
	RouteTableIDRef *v1.Reference `json:"routeTableIdRef,omitempty" tf:"-"`

	// Selector for a RouteTable in routetable to populate routeTableId.
	// +kubebuilder:validation:Optional
	RouteTableIDSelector *v1.Selector `json:"routeTableIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VMID *string `json:"vmId,omitempty" tf:"vm_id,omitempty"`
}

// RouteSpec defines the desired state of Route
type RouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteParameters `json:"forProvider"`
}

// RouteStatus defines the observed state of Route.
type RouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route is the Schema for the Routes API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type Route struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteSpec   `json:"spec"`
	Status            RouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteList contains a list of Routes
type RouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route `json:"items"`
}

// Repository type metadata.
var (
	Route_Kind             = "Route"
	Route_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Route_Kind}.String()
	Route_KindAPIVersion   = Route_Kind + "." + CRDGroupVersion.String()
	Route_GroupVersionKind = CRDGroupVersion.WithKind(Route_Kind)
)

func init() {
	SchemeBuilder.Register(&Route{}, &RouteList{})
}
