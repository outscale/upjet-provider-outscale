/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InternetServiceLinkObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	Tags []InternetServiceLinkTagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`
}

type InternetServiceLinkParameters struct {

	// +crossplane:generate:reference:type=InternetService
	// +kubebuilder:validation:Optional
	InternetServiceID *string `json:"internetServiceId,omitempty" tf:"internet_service_id,omitempty"`

	// Reference to a InternetService to populate internetServiceId.
	// +kubebuilder:validation:Optional
	InternetServiceIDRef *v1.Reference `json:"internetServiceIdRef,omitempty" tf:"-"`

	// Selector for a InternetService to populate internetServiceId.
	// +kubebuilder:validation:Optional
	InternetServiceIDSelector *v1.Selector `json:"internetServiceIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/outscale-vbr/upjet-provider-outscale/apis/net/v1alpha1.Net
	// +kubebuilder:validation:Optional
	NetID *string `json:"netId,omitempty" tf:"net_id,omitempty"`

	// Reference to a Net in net to populate netId.
	// +kubebuilder:validation:Optional
	NetIDRef *v1.Reference `json:"netIdRef,omitempty" tf:"-"`

	// Selector for a Net in net to populate netId.
	// +kubebuilder:validation:Optional
	NetIDSelector *v1.Selector `json:"netIdSelector,omitempty" tf:"-"`
}

type InternetServiceLinkTagsObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type InternetServiceLinkTagsParameters struct {
}

// InternetServiceLinkSpec defines the desired state of InternetServiceLink
type InternetServiceLinkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InternetServiceLinkParameters `json:"forProvider"`
}

// InternetServiceLinkStatus defines the observed state of InternetServiceLink.
type InternetServiceLinkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InternetServiceLinkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InternetServiceLink is the Schema for the InternetServiceLinks API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type InternetServiceLink struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InternetServiceLinkSpec   `json:"spec"`
	Status            InternetServiceLinkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InternetServiceLinkList contains a list of InternetServiceLinks
type InternetServiceLinkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InternetServiceLink `json:"items"`
}

// Repository type metadata.
var (
	InternetServiceLink_Kind             = "InternetServiceLink"
	InternetServiceLink_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InternetServiceLink_Kind}.String()
	InternetServiceLink_KindAPIVersion   = InternetServiceLink_Kind + "." + CRDGroupVersion.String()
	InternetServiceLink_GroupVersionKind = CRDGroupVersion.WithKind(InternetServiceLink_Kind)
)

func init() {
	SchemeBuilder.Register(&InternetServiceLink{}, &InternetServiceLinkList{})
}
