/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetAttributesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPRange *string `json:"ipRange,omitempty" tf:"ip_range,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	Tags []NetAttributesTagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`

	Tenancy *string `json:"tenancy,omitempty" tf:"tenancy,omitempty"`
}

type NetAttributesParameters struct {

	// +kubebuilder:validation:Optional
	DHCPOptionsSetID *string `json:"dhcpOptionsSetId,omitempty" tf:"dhcp_options_set_id,omitempty"`

	// +kubebuilder:validation:Required
	NetID *string `json:"netId" tf:"net_id,omitempty"`
}

type NetAttributesTagsObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NetAttributesTagsParameters struct {
}

// NetAttributesSpec defines the desired state of NetAttributes
type NetAttributesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetAttributesParameters `json:"forProvider"`
}

// NetAttributesStatus defines the observed state of NetAttributes.
type NetAttributesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetAttributesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetAttributes is the Schema for the NetAttributess API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type NetAttributes struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetAttributesSpec   `json:"spec"`
	Status            NetAttributesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetAttributesList contains a list of NetAttributess
type NetAttributesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetAttributes `json:"items"`
}

// Repository type metadata.
var (
	NetAttributes_Kind             = "NetAttributes"
	NetAttributes_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetAttributes_Kind}.String()
	NetAttributes_KindAPIVersion   = NetAttributes_Kind + "." + CRDGroupVersion.String()
	NetAttributes_GroupVersionKind = CRDGroupVersion.WithKind(NetAttributes_Kind)
)

func init() {
	SchemeBuilder.Register(&NetAttributes{}, &NetAttributesList{})
}
