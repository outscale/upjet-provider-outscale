/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetObservation struct {
	DHCPOptionsSetID *string `json:"dhcpOptionsSetId,omitempty" tf:"dhcp_options_set_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	NetID *string `json:"netId,omitempty" tf:"net_id,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type NetParameters struct {

	// +kubebuilder:validation:Required
	IPRange *string `json:"ipRange" tf:"ip_range,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Tenancy *string `json:"tenancy,omitempty" tf:"tenancy,omitempty"`
}

type TagsObservation struct {
}

type TagsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// NetSpec defines the desired state of Net
type NetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetParameters `json:"forProvider"`
}

// NetStatus defines the observed state of Net.
type NetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Net is the Schema for the Nets API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type Net struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetSpec   `json:"spec"`
	Status            NetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetList contains a list of Nets
type NetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Net `json:"items"`
}

// Repository type metadata.
var (
	Net_Kind             = "Net"
	Net_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Net_Kind}.String()
	Net_KindAPIVersion   = Net_Kind + "." + CRDGroupVersion.String()
	Net_GroupVersionKind = CRDGroupVersion.WithKind(Net_Kind)
)

func init() {
	SchemeBuilder.Register(&Net{}, &NetList{})
}
