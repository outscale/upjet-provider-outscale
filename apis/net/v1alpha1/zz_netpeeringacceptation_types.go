/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetPeeringAcceptationObservation struct {
	AccepterNet map[string]*string `json:"accepterNet,omitempty" tf:"accepter_net,omitempty"`

	AccepterNetID *string `json:"accepterNetId,omitempty" tf:"accepter_net_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	SourceNet map[string]*string `json:"sourceNet,omitempty" tf:"source_net,omitempty"`

	SourceNetID *string `json:"sourceNetId,omitempty" tf:"source_net_id,omitempty"`

	State map[string]*string `json:"state,omitempty" tf:"state,omitempty"`

	Tags []NetPeeringAcceptationTagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`
}

type NetPeeringAcceptationParameters struct {

	// +crossplane:generate:reference:type=NetPeering
	// +kubebuilder:validation:Optional
	NetPeeringID *string `json:"netPeeringId,omitempty" tf:"net_peering_id,omitempty"`

	// Reference to a NetPeering to populate netPeeringId.
	// +kubebuilder:validation:Optional
	NetPeeringIDRef *v1.Reference `json:"netPeeringIdRef,omitempty" tf:"-"`

	// Selector for a NetPeering to populate netPeeringId.
	// +kubebuilder:validation:Optional
	NetPeeringIDSelector *v1.Selector `json:"netPeeringIdSelector,omitempty" tf:"-"`
}

type NetPeeringAcceptationTagsObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NetPeeringAcceptationTagsParameters struct {
}

// NetPeeringAcceptationSpec defines the desired state of NetPeeringAcceptation
type NetPeeringAcceptationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetPeeringAcceptationParameters `json:"forProvider"`
}

// NetPeeringAcceptationStatus defines the observed state of NetPeeringAcceptation.
type NetPeeringAcceptationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetPeeringAcceptationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetPeeringAcceptation is the Schema for the NetPeeringAcceptations API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type NetPeeringAcceptation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetPeeringAcceptationSpec   `json:"spec"`
	Status            NetPeeringAcceptationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetPeeringAcceptationList contains a list of NetPeeringAcceptations
type NetPeeringAcceptationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetPeeringAcceptation `json:"items"`
}

// Repository type metadata.
var (
	NetPeeringAcceptation_Kind             = "NetPeeringAcceptation"
	NetPeeringAcceptation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetPeeringAcceptation_Kind}.String()
	NetPeeringAcceptation_KindAPIVersion   = NetPeeringAcceptation_Kind + "." + CRDGroupVersion.String()
	NetPeeringAcceptation_GroupVersionKind = CRDGroupVersion.WithKind(NetPeeringAcceptation_Kind)
)

func init() {
	SchemeBuilder.Register(&NetPeeringAcceptation{}, &NetPeeringAcceptationList{})
}
