/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OsuAPIKeyObservation struct {
}

type OsuAPIKeyParameters struct {

	// +kubebuilder:validation:Required
	APIKeyID *string `json:"apiKeyId" tf:"api_key_id,omitempty"`

	// +kubebuilder:validation:Required
	SecretKey *string `json:"secretKey" tf:"secret_key,omitempty"`
}

type OsuExportObservation struct {
}

type OsuExportParameters struct {

	// +kubebuilder:validation:Required
	DiskImageFormat *string `json:"diskImageFormat" tf:"disk_image_format,omitempty"`

	// +kubebuilder:validation:Optional
	OsuAPIKey []OsuAPIKeyParameters `json:"osuApiKey,omitempty" tf:"osu_api_key,omitempty"`

	// +kubebuilder:validation:Required
	OsuBucket *string `json:"osuBucket" tf:"osu_bucket,omitempty"`

	// +kubebuilder:validation:Optional
	OsuPrefix *string `json:"osuPrefix,omitempty" tf:"osu_prefix,omitempty"`
}

type SnapshotExportTaskObservation struct {
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Progress *float64 `json:"progress,omitempty" tf:"progress,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TaskID *string `json:"taskId,omitempty" tf:"task_id,omitempty"`
}

type SnapshotExportTaskParameters struct {

	// +kubebuilder:validation:Required
	OsuExport []OsuExportParameters `json:"osuExport" tf:"osu_export,omitempty"`

	// +crossplane:generate:reference:type=Snapshot
	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Reference to a Snapshot to populate snapshotId.
	// +kubebuilder:validation:Optional
	SnapshotIDRef *v1.Reference `json:"snapshotIdRef,omitempty" tf:"-"`

	// Selector for a Snapshot to populate snapshotId.
	// +kubebuilder:validation:Optional
	SnapshotIDSelector *v1.Selector `json:"snapshotIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags []SnapshotExportTaskTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SnapshotExportTaskTagsObservation struct {
}

type SnapshotExportTaskTagsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// SnapshotExportTaskSpec defines the desired state of SnapshotExportTask
type SnapshotExportTaskSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnapshotExportTaskParameters `json:"forProvider"`
}

// SnapshotExportTaskStatus defines the observed state of SnapshotExportTask.
type SnapshotExportTaskStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnapshotExportTaskObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotExportTask is the Schema for the SnapshotExportTasks API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type SnapshotExportTask struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnapshotExportTaskSpec   `json:"spec"`
	Status            SnapshotExportTaskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotExportTaskList contains a list of SnapshotExportTasks
type SnapshotExportTaskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnapshotExportTask `json:"items"`
}

// Repository type metadata.
var (
	SnapshotExportTask_Kind             = "SnapshotExportTask"
	SnapshotExportTask_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SnapshotExportTask_Kind}.String()
	SnapshotExportTask_KindAPIVersion   = SnapshotExportTask_Kind + "." + CRDGroupVersion.String()
	SnapshotExportTask_GroupVersionKind = CRDGroupVersion.WithKind(SnapshotExportTask_Kind)
)

func init() {
	SchemeBuilder.Register(&SnapshotExportTask{}, &SnapshotExportTaskList{})
}
