/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PermissionsToCreateVolumeAdditionsObservation struct {
}

type PermissionsToCreateVolumeAdditionsParameters struct {

	// +kubebuilder:validation:Optional
	AccountIds []*string `json:"accountIds,omitempty" tf:"account_ids,omitempty"`

	// +kubebuilder:validation:Optional
	GlobalPermission *bool `json:"globalPermission,omitempty" tf:"global_permission,omitempty"`
}

type PermissionsToCreateVolumeRemovalsObservation struct {
}

type PermissionsToCreateVolumeRemovalsParameters struct {

	// +kubebuilder:validation:Optional
	AccountIds []*string `json:"accountIds,omitempty" tf:"account_ids,omitempty"`

	// +kubebuilder:validation:Optional
	GlobalPermission *bool `json:"globalPermission,omitempty" tf:"global_permission,omitempty"`
}

type SnapshotAttributesObservation struct {
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`
}

type SnapshotAttributesParameters struct {

	// +kubebuilder:validation:Optional
	PermissionsToCreateVolumeAdditions []PermissionsToCreateVolumeAdditionsParameters `json:"permissionsToCreateVolumeAdditions,omitempty" tf:"permissions_to_create_volume_additions,omitempty"`

	// +kubebuilder:validation:Optional
	PermissionsToCreateVolumeRemovals []PermissionsToCreateVolumeRemovalsParameters `json:"permissionsToCreateVolumeRemovals,omitempty" tf:"permissions_to_create_volume_removals,omitempty"`

	// +crossplane:generate:reference:type=Snapshot
	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Reference to a Snapshot to populate snapshotId.
	// +kubebuilder:validation:Optional
	SnapshotIDRef *v1.Reference `json:"snapshotIdRef,omitempty" tf:"-"`

	// Selector for a Snapshot to populate snapshotId.
	// +kubebuilder:validation:Optional
	SnapshotIDSelector *v1.Selector `json:"snapshotIdSelector,omitempty" tf:"-"`
}

// SnapshotAttributesSpec defines the desired state of SnapshotAttributes
type SnapshotAttributesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnapshotAttributesParameters `json:"forProvider"`
}

// SnapshotAttributesStatus defines the observed state of SnapshotAttributes.
type SnapshotAttributesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnapshotAttributesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotAttributes is the Schema for the SnapshotAttributess API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type SnapshotAttributes struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnapshotAttributesSpec   `json:"spec"`
	Status            SnapshotAttributesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotAttributesList contains a list of SnapshotAttributess
type SnapshotAttributesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnapshotAttributes `json:"items"`
}

// Repository type metadata.
var (
	SnapshotAttributes_Kind             = "SnapshotAttributes"
	SnapshotAttributes_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SnapshotAttributes_Kind}.String()
	SnapshotAttributes_KindAPIVersion   = SnapshotAttributes_Kind + "." + CRDGroupVersion.String()
	SnapshotAttributes_GroupVersionKind = CRDGroupVersion.WithKind(SnapshotAttributes_Kind)
)

func init() {
	SchemeBuilder.Register(&SnapshotAttributes{}, &SnapshotAttributesList{})
}
