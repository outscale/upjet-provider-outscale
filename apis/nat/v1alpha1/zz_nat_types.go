/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NatObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	NATServiceID *string `json:"natServiceId,omitempty" tf:"nat_service_id,omitempty"`

	NetID *string `json:"netId,omitempty" tf:"net_id,omitempty"`

	PublicIps []PublicIpsObservation `json:"publicIps,omitempty" tf:"public_ips,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type NatParameters struct {

	// +crossplane:generate:reference:type=github.com/outscale-vbr/upjet-provider-outscale/apis/publicip/v1alpha1.PublicIp
	// +kubebuilder:validation:Optional
	PublicIPID *string `json:"publicIpId,omitempty" tf:"public_ip_id,omitempty"`

	// Reference to a PublicIp in publicip to populate publicIpId.
	// +kubebuilder:validation:Optional
	PublicIPIDRef *v1.Reference `json:"publicIpIdRef,omitempty" tf:"-"`

	// Selector for a PublicIp in publicip to populate publicIpId.
	// +kubebuilder:validation:Optional
	PublicIPIDSelector *v1.Selector `json:"publicIpIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/outscale-vbr/upjet-provider-outscale/apis/subnet/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in subnet to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in subnet to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type PublicIpsObservation struct {
	PublicIP *string `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	PublicIPID *string `json:"publicIpId,omitempty" tf:"public_ip_id,omitempty"`
}

type PublicIpsParameters struct {
}

type TagsObservation struct {
}

type TagsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// NatSpec defines the desired state of Nat
type NatSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NatParameters `json:"forProvider"`
}

// NatStatus defines the observed state of Nat.
type NatStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NatObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Nat is the Schema for the Nats API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type Nat struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NatSpec   `json:"spec"`
	Status            NatStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NatList contains a list of Nats
type NatList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Nat `json:"items"`
}

// Repository type metadata.
var (
	Nat_Kind             = "Nat"
	Nat_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Nat_Kind}.String()
	Nat_KindAPIVersion   = Nat_Kind + "." + CRDGroupVersion.String()
	Nat_GroupVersionKind = CRDGroupVersion.WithKind(Nat_Kind)
)

func init() {
	SchemeBuilder.Register(&Nat{}, &NatList{})
}
