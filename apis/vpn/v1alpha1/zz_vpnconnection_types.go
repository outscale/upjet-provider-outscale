/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoutesObservation struct {
	DestinationIPRange *string `json:"destinationIpRange,omitempty" tf:"destination_ip_range,omitempty"`

	RouteType *string `json:"routeType,omitempty" tf:"route_type,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type RoutesParameters struct {
}

type TagsObservation struct {
}

type TagsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type VgwTelemetriesObservation struct {
	AcceptedRouteCount *float64 `json:"acceptedRouteCount,omitempty" tf:"accepted_route_count,omitempty"`

	LastStateChangeDate *string `json:"lastStateChangeDate,omitempty" tf:"last_state_change_date,omitempty"`

	OutsideIPAddress *string `json:"outsideIpAddress,omitempty" tf:"outside_ip_address,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	StateDescription *string `json:"stateDescription,omitempty" tf:"state_description,omitempty"`
}

type VgwTelemetriesParameters struct {
}

type VpnConnectionObservation struct {
	ClientGatewayConfiguration *string `json:"clientGatewayConfiguration,omitempty" tf:"client_gateway_configuration,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	Routes []RoutesObservation `json:"routes,omitempty" tf:"routes,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	VPNConnectionID *string `json:"vpnConnectionId,omitempty" tf:"vpn_connection_id,omitempty"`

	VgwTelemetries []VgwTelemetriesObservation `json:"vgwTelemetries,omitempty" tf:"vgw_telemetries,omitempty"`
}

type VpnConnectionParameters struct {

	// +crossplane:generate:reference:type=github.com/outscale-vbr/upjet-provider-outscale/apis/clientgateway/v1alpha1.ClientGateway
	// +kubebuilder:validation:Optional
	ClientGatewayID *string `json:"clientGatewayId,omitempty" tf:"client_gateway_id,omitempty"`

	// Reference to a ClientGateway in clientgateway to populate clientGatewayId.
	// +kubebuilder:validation:Optional
	ClientGatewayIDRef *v1.Reference `json:"clientGatewayIdRef,omitempty" tf:"-"`

	// Selector for a ClientGateway in clientgateway to populate clientGatewayId.
	// +kubebuilder:validation:Optional
	ClientGatewayIDSelector *v1.Selector `json:"clientGatewayIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	ConnectionType *string `json:"connectionType" tf:"connection_type,omitempty"`

	// +kubebuilder:validation:Optional
	StaticRoutesOnly *bool `json:"staticRoutesOnly,omitempty" tf:"static_routes_only,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// +crossplane:generate:reference:type=github.com/outscale-vbr/upjet-provider-outscale/apis/virtualgateway/v1alpha1.VirtualGateway
	// +kubebuilder:validation:Optional
	VirtualGatewayID *string `json:"virtualGatewayId,omitempty" tf:"virtual_gateway_id,omitempty"`

	// Reference to a VirtualGateway in virtualgateway to populate virtualGatewayId.
	// +kubebuilder:validation:Optional
	VirtualGatewayIDRef *v1.Reference `json:"virtualGatewayIdRef,omitempty" tf:"-"`

	// Selector for a VirtualGateway in virtualgateway to populate virtualGatewayId.
	// +kubebuilder:validation:Optional
	VirtualGatewayIDSelector *v1.Selector `json:"virtualGatewayIdSelector,omitempty" tf:"-"`
}

// VpnConnectionSpec defines the desired state of VpnConnection
type VpnConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VpnConnectionParameters `json:"forProvider"`
}

// VpnConnectionStatus defines the observed state of VpnConnection.
type VpnConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VpnConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VpnConnection is the Schema for the VpnConnections API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type VpnConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpnConnectionSpec   `json:"spec"`
	Status            VpnConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpnConnectionList contains a list of VpnConnections
type VpnConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpnConnection `json:"items"`
}

// Repository type metadata.
var (
	VpnConnection_Kind             = "VpnConnection"
	VpnConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VpnConnection_Kind}.String()
	VpnConnection_KindAPIVersion   = VpnConnection_Kind + "." + CRDGroupVersion.String()
	VpnConnection_GroupVersionKind = CRDGroupVersion.WithKind(VpnConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&VpnConnection{}, &VpnConnectionList{})
}
