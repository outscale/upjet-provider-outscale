/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BlockDeviceMappingsCreatedObservation struct {
}

type BlockDeviceMappingsCreatedParameters struct {

	// +kubebuilder:validation:Optional
	Bsu map[string]*string `json:"bsu,omitempty" tf:"bsu,omitempty"`

	// +kubebuilder:validation:Optional
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name,omitempty"`
}

type BlockDeviceMappingsObservation struct {
}

type BlockDeviceMappingsParameters struct {

	// +kubebuilder:validation:Optional
	Bsu []BsuParameters `json:"bsu,omitempty" tf:"bsu,omitempty"`

	// +kubebuilder:validation:Optional
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name,omitempty"`

	// +kubebuilder:validation:Optional
	NoDevice *string `json:"noDevice,omitempty" tf:"no_device,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualDeviceName *string `json:"virtualDeviceName,omitempty" tf:"virtual_device_name,omitempty"`
}

type BsuObservation struct {
}

type BsuParameters struct {

	// +kubebuilder:validation:Optional
	DeleteOnVMDeletion *bool `json:"deleteOnVmDeletion,omitempty" tf:"delete_on_vm_deletion,omitempty"`

	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeSize *float64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type LinkNicObservation struct {
	DeleteOnVMDeletion *bool `json:"deleteOnVmDeletion,omitempty" tf:"delete_on_vm_deletion,omitempty"`

	DeviceNumber *string `json:"deviceNumber,omitempty" tf:"device_number,omitempty"`

	LinkNicID *string `json:"linkNicId,omitempty" tf:"link_nic_id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type LinkNicParameters struct {
}

type LinkPublicIPObservation struct {
	PublicDNSName *string `json:"publicDnsName,omitempty" tf:"public_dns_name,omitempty"`

	PublicIP *string `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	PublicIPAccountID *string `json:"publicIpAccountId,omitempty" tf:"public_ip_account_id,omitempty"`
}

type LinkPublicIPParameters struct {
}

type NicsObservation struct {
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	IsSourceDestChecked *bool `json:"isSourceDestChecked,omitempty" tf:"is_source_dest_checked,omitempty"`

	LinkNic []LinkNicObservation `json:"linkNic,omitempty" tf:"link_nic,omitempty"`

	LinkPublicIP []LinkPublicIPObservation `json:"linkPublicIp,omitempty" tf:"link_public_ip,omitempty"`

	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	NetID *string `json:"netId,omitempty" tf:"net_id,omitempty"`

	PrivateDNSName *string `json:"privateDnsName,omitempty" tf:"private_dns_name,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateIps []PrivateIpsObservation `json:"privateIps,omitempty" tf:"private_ips,omitempty"`

	SecurityGroups []SecurityGroupsObservation `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type NicsParameters struct {

	// +kubebuilder:validation:Optional
	DeleteOnVMDeletion *bool `json:"deleteOnVmDeletion,omitempty" tf:"delete_on_vm_deletion,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	DeviceNumber *float64 `json:"deviceNumber" tf:"device_number,omitempty"`

	// +crossplane:generate:reference:type=github.com/outscale-vbr/upjet-provider-outscale/apis/nic/v1alpha1.Nic
	// +kubebuilder:validation:Optional
	NicID *string `json:"nicId,omitempty" tf:"nic_id,omitempty"`

	// Reference to a Nic in nic to populate nicId.
	// +kubebuilder:validation:Optional
	NicIDRef *v1.Reference `json:"nicIdRef,omitempty" tf:"-"`

	// Selector for a Nic in nic to populate nicId.
	// +kubebuilder:validation:Optional
	NicIDSelector *v1.Selector `json:"nicIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PrivateIps []PrivateIpsParameters `json:"privateIps,omitempty" tf:"private_ips,omitempty"`

	// +kubebuilder:validation:Optional
	SecondaryPrivateIPCount *float64 `json:"secondaryPrivateIpCount,omitempty" tf:"secondary_private_ip_count,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// +crossplane:generate:reference:type=github.com/outscale-vbr/upjet-provider-outscale/apis/subnet/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in subnet to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in subnet to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type PrivateIpsLinkPublicIPObservation struct {
	PublicDNSName *string `json:"publicDnsName,omitempty" tf:"public_dns_name,omitempty"`

	PublicIP *string `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	PublicIPAccountID *string `json:"publicIpAccountId,omitempty" tf:"public_ip_account_id,omitempty"`
}

type PrivateIpsLinkPublicIPParameters struct {
}

type PrivateIpsObservation struct {
	LinkPublicIP []PrivateIpsLinkPublicIPObservation `json:"linkPublicIp,omitempty" tf:"link_public_ip,omitempty"`

	PrivateDNSName *string `json:"privateDnsName,omitempty" tf:"private_dns_name,omitempty"`
}

type PrivateIpsParameters struct {

	// +kubebuilder:validation:Optional
	IsPrimary *bool `json:"isPrimary,omitempty" tf:"is_primary,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`
}

type SecurityGroupsObservation struct {
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	SecurityGroupName *string `json:"securityGroupName,omitempty" tf:"security_group_name,omitempty"`
}

type SecurityGroupsParameters struct {
}

type TagsObservation struct {
}

type TagsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type VmObservation struct {
	AdminPassword *string `json:"adminPassword,omitempty" tf:"admin_password,omitempty"`

	Architecture *string `json:"architecture,omitempty" tf:"architecture,omitempty"`

	ClientToken *string `json:"clientToken,omitempty" tf:"client_token,omitempty"`

	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	Hypervisor *string `json:"hypervisor,omitempty" tf:"hypervisor,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LaunchNumber *float64 `json:"launchNumber,omitempty" tf:"launch_number,omitempty"`

	NetID *string `json:"netId,omitempty" tf:"net_id,omitempty"`

	// +kubebuilder:validation:Optional
	Nics []NicsObservation `json:"nics,omitempty" tf:"nics,omitempty"`

	OsFamily *string `json:"osFamily,omitempty" tf:"os_family,omitempty"`

	PrivateDNSName *string `json:"privateDnsName,omitempty" tf:"private_dns_name,omitempty"`

	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	ProductCodes []*string `json:"productCodes,omitempty" tf:"product_codes,omitempty"`

	PublicDNSName *string `json:"publicDnsName,omitempty" tf:"public_dns_name,omitempty"`

	PublicIP *string `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	ReservationID *string `json:"reservationId,omitempty" tf:"reservation_id,omitempty"`

	RootDeviceName *string `json:"rootDeviceName,omitempty" tf:"root_device_name,omitempty"`

	RootDeviceType *string `json:"rootDeviceType,omitempty" tf:"root_device_type,omitempty"`

	SecurityGroups []VmSecurityGroupsObservation `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	StateReason *string `json:"stateReason,omitempty" tf:"state_reason,omitempty"`
}

type VmParameters struct {

	// +kubebuilder:validation:Optional
	BlockDeviceMappings []BlockDeviceMappingsParameters `json:"blockDeviceMappings,omitempty" tf:"block_device_mappings,omitempty"`

	// +kubebuilder:validation:Optional
	BlockDeviceMappingsCreated []BlockDeviceMappingsCreatedParameters `json:"blockDeviceMappingsCreated,omitempty" tf:"block_device_mappings_created,omitempty"`

	// +kubebuilder:validation:Optional
	BsuOptimized *bool `json:"bsuOptimized,omitempty" tf:"bsu_optimized,omitempty"`

	// +kubebuilder:validation:Optional
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// +kubebuilder:validation:Optional
	GetAdminPassword *bool `json:"getAdminPassword,omitempty" tf:"get_admin_password,omitempty"`

	// +kubebuilder:validation:Required
	ImageID *string `json:"imageId" tf:"image_id,omitempty"`

	// +kubebuilder:validation:Optional
	IsSourceDestChecked *bool `json:"isSourceDestChecked,omitempty" tf:"is_source_dest_checked,omitempty"`

	// +kubebuilder:validation:Optional
	KeypairName *string `json:"keypairName,omitempty" tf:"keypair_name,omitempty"`

	// +kubebuilder:validation:Optional
	NestedVirtualization *bool `json:"nestedVirtualization,omitempty" tf:"nested_virtualization,omitempty"`

	// +kubebuilder:validation:Optional
	Nics []NicsParameters `json:"nics,omitempty" tf:"nics,omitempty"`

	// +kubebuilder:validation:Optional
	Performance *string `json:"performance,omitempty" tf:"performance,omitempty"`

	// +kubebuilder:validation:Optional
	PlacementSubregionName *string `json:"placementSubregionName,omitempty" tf:"placement_subregion_name,omitempty"`

	// +kubebuilder:validation:Optional
	PlacementTenancy *string `json:"placementTenancy,omitempty" tf:"placement_tenancy,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateIps []*string `json:"privateIps,omitempty" tf:"private_ips,omitempty"`

	// +crossplane:generate:reference:type=github.com/outscale-vbr/upjet-provider-outscale/apis/securitygroup/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to SecurityGroup in securitygroup to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsRefs []v1.Reference `json:"securityGroupIdsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in securitygroup to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsSelector *v1.Selector `json:"securityGroupIdsSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SecurityGroupNames []*string `json:"securityGroupNames,omitempty" tf:"security_group_names,omitempty"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// +crossplane:generate:reference:type=github.com/outscale-vbr/upjet-provider-outscale/apis/subnet/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in subnet to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in subnet to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	// +kubebuilder:validation:Optional
	VMID *string `json:"vmId,omitempty" tf:"vm_id,omitempty"`

	// +kubebuilder:validation:Optional
	VMInitiatedShutdownBehavior *string `json:"vmInitiatedShutdownBehavior,omitempty" tf:"vm_initiated_shutdown_behavior,omitempty"`

	// +kubebuilder:validation:Optional
	VMType *string `json:"vmType,omitempty" tf:"vm_type,omitempty"`
}

type VmSecurityGroupsObservation struct {
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	SecurityGroupName *string `json:"securityGroupName,omitempty" tf:"security_group_name,omitempty"`
}

type VmSecurityGroupsParameters struct {
}

// VmSpec defines the desired state of Vm
type VmSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VmParameters `json:"forProvider"`
}

// VmStatus defines the observed state of Vm.
type VmStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VmObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Vm is the Schema for the Vms API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type Vm struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VmSpec   `json:"spec"`
	Status            VmStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VmList contains a list of Vms
type VmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Vm `json:"items"`
}

// Repository type metadata.
var (
	Vm_Kind             = "Vm"
	Vm_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Vm_Kind}.String()
	Vm_KindAPIVersion   = Vm_Kind + "." + CRDGroupVersion.String()
	Vm_GroupVersionKind = CRDGroupVersion.WithKind(Vm_Kind)
)

func init() {
	SchemeBuilder.Register(&Vm{}, &VmList{})
}
