/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouteTableLinkObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LinkRouteTableID *string `json:"linkRouteTableId,omitempty" tf:"link_route_table_id,omitempty"`

	Main *bool `json:"main,omitempty" tf:"main,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`
}

type RouteTableLinkParameters struct {

	// +crossplane:generate:reference:type=RouteTable
	// +kubebuilder:validation:Optional
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// Reference to a RouteTable to populate routeTableId.
	// +kubebuilder:validation:Optional
	RouteTableIDRef *v1.Reference `json:"routeTableIdRef,omitempty" tf:"-"`

	// Selector for a RouteTable to populate routeTableId.
	// +kubebuilder:validation:Optional
	RouteTableIDSelector *v1.Selector `json:"routeTableIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/outscale-vbr/upjet-provider-outscale/apis/subnet/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in subnet to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in subnet to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

// RouteTableLinkSpec defines the desired state of RouteTableLink
type RouteTableLinkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteTableLinkParameters `json:"forProvider"`
}

// RouteTableLinkStatus defines the observed state of RouteTableLink.
type RouteTableLinkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteTableLinkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RouteTableLink is the Schema for the RouteTableLinks API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type RouteTableLink struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteTableLinkSpec   `json:"spec"`
	Status            RouteTableLinkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteTableLinkList contains a list of RouteTableLinks
type RouteTableLinkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteTableLink `json:"items"`
}

// Repository type metadata.
var (
	RouteTableLink_Kind             = "RouteTableLink"
	RouteTableLink_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouteTableLink_Kind}.String()
	RouteTableLink_KindAPIVersion   = RouteTableLink_Kind + "." + CRDGroupVersion.String()
	RouteTableLink_GroupVersionKind = CRDGroupVersion.WithKind(RouteTableLink_Kind)
)

func init() {
	SchemeBuilder.Register(&RouteTableLink{}, &RouteTableLinkList{})
}
