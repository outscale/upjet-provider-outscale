/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LinkRouteTablesObservation struct {
	LinkRouteTableID *string `json:"linkRouteTableId,omitempty" tf:"link_route_table_id,omitempty"`

	Main *bool `json:"main,omitempty" tf:"main,omitempty"`

	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	RouteTableToSubnetLinkID *string `json:"routeTableToSubnetLinkId,omitempty" tf:"route_table_to_subnet_link_id,omitempty"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type LinkRouteTablesParameters struct {
}

type RoutePropagatingVirtualGatewaysObservation struct {
	VirtualGatewayID *string `json:"virtualGatewayId,omitempty" tf:"virtual_gateway_id,omitempty"`
}

type RoutePropagatingVirtualGatewaysParameters struct {
}

type RouteTableObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LinkRouteTables []LinkRouteTablesObservation `json:"linkRouteTables,omitempty" tf:"link_route_tables,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	RoutePropagatingVirtualGateways []RoutePropagatingVirtualGatewaysObservation `json:"routePropagatingVirtualGateways,omitempty" tf:"route_propagating_virtual_gateways,omitempty"`

	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	Routes []RoutesObservation `json:"routes,omitempty" tf:"routes,omitempty"`
}

type RouteTableParameters struct {

	// +crossplane:generate:reference:type=github.com/outscale-vbr/upjet-provider-outscale/apis/net/v1alpha1.Net
	// +kubebuilder:validation:Optional
	NetID *string `json:"netId,omitempty" tf:"net_id,omitempty"`

	// Reference to a Net in net to populate netId.
	// +kubebuilder:validation:Optional
	NetIDRef *v1.Reference `json:"netIdRef,omitempty" tf:"-"`

	// Selector for a Net in net to populate netId.
	// +kubebuilder:validation:Optional
	NetIDSelector *v1.Selector `json:"netIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type RoutesObservation struct {
	CreationMethod *string `json:"creationMethod,omitempty" tf:"creation_method,omitempty"`

	DestinationIPRange *string `json:"destinationIpRange,omitempty" tf:"destination_ip_range,omitempty"`

	DestinationServiceID *string `json:"destinationServiceId,omitempty" tf:"destination_service_id,omitempty"`

	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	NATServiceID *string `json:"natServiceId,omitempty" tf:"nat_service_id,omitempty"`

	NetAccessPointID *string `json:"netAccessPointId,omitempty" tf:"net_access_point_id,omitempty"`

	NetPeeringID *string `json:"netPeeringId,omitempty" tf:"net_peering_id,omitempty"`

	NicID *string `json:"nicId,omitempty" tf:"nic_id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	VMAccountID *string `json:"vmAccountId,omitempty" tf:"vm_account_id,omitempty"`

	VMID *string `json:"vmId,omitempty" tf:"vm_id,omitempty"`
}

type RoutesParameters struct {
}

type TagsObservation struct {
}

type TagsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// RouteTableSpec defines the desired state of RouteTable
type RouteTableSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteTableParameters `json:"forProvider"`
}

// RouteTableStatus defines the observed state of RouteTable.
type RouteTableStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteTableObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RouteTable is the Schema for the RouteTables API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type RouteTable struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteTableSpec   `json:"spec"`
	Status            RouteTableStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteTableList contains a list of RouteTables
type RouteTableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteTable `json:"items"`
}

// Repository type metadata.
var (
	RouteTable_Kind             = "RouteTable"
	RouteTable_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouteTable_Kind}.String()
	RouteTable_KindAPIVersion   = RouteTable_Kind + "." + CRDGroupVersion.String()
	RouteTable_GroupVersionKind = CRDGroupVersion.WithKind(RouteTable_Kind)
)

func init() {
	SchemeBuilder.Register(&RouteTable{}, &RouteTableList{})
}
