/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NicPrivateIpObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PrimaryPrivateIP *string `json:"primaryPrivateIp,omitempty" tf:"primary_private_ip,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`
}

type NicPrivateIpParameters struct {

	// +kubebuilder:validation:Optional
	AllowRelink *bool `json:"allowRelink,omitempty" tf:"allow_relink,omitempty"`

	// +crossplane:generate:reference:type=Nic
	// +kubebuilder:validation:Optional
	NicID *string `json:"nicId,omitempty" tf:"nic_id,omitempty"`

	// Reference to a Nic to populate nicId.
	// +kubebuilder:validation:Optional
	NicIDRef *v1.Reference `json:"nicIdRef,omitempty" tf:"-"`

	// Selector for a Nic to populate nicId.
	// +kubebuilder:validation:Optional
	NicIDSelector *v1.Selector `json:"nicIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PrivateIps []*string `json:"privateIps,omitempty" tf:"private_ips,omitempty"`

	// +kubebuilder:validation:Optional
	SecondaryPrivateIPCount *float64 `json:"secondaryPrivateIpCount,omitempty" tf:"secondary_private_ip_count,omitempty"`
}

// NicPrivateIpSpec defines the desired state of NicPrivateIp
type NicPrivateIpSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NicPrivateIpParameters `json:"forProvider"`
}

// NicPrivateIpStatus defines the observed state of NicPrivateIp.
type NicPrivateIpStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NicPrivateIpObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NicPrivateIp is the Schema for the NicPrivateIps API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type NicPrivateIp struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NicPrivateIpSpec   `json:"spec"`
	Status            NicPrivateIpStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NicPrivateIpList contains a list of NicPrivateIps
type NicPrivateIpList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NicPrivateIp `json:"items"`
}

// Repository type metadata.
var (
	NicPrivateIp_Kind             = "NicPrivateIp"
	NicPrivateIp_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NicPrivateIp_Kind}.String()
	NicPrivateIp_KindAPIVersion   = NicPrivateIp_Kind + "." + CRDGroupVersion.String()
	NicPrivateIp_GroupVersionKind = CRDGroupVersion.WithKind(NicPrivateIp_Kind)
)

func init() {
	SchemeBuilder.Register(&NicPrivateIp{}, &NicPrivateIpList{})
}
