/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LinkObservation struct {
	DeleteOnVMDeletion *bool `json:"deleteOnVmDeletion,omitempty" tf:"delete_on_vm_deletion,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LinkNicID *string `json:"linkNicId,omitempty" tf:"link_nic_id,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	VMAccountID *string `json:"vmAccountId,omitempty" tf:"vm_account_id,omitempty"`
}

type LinkParameters struct {

	// +kubebuilder:validation:Required
	DeviceNumber *float64 `json:"deviceNumber" tf:"device_number,omitempty"`

	// +kubebuilder:validation:Required
	NicID *string `json:"nicId" tf:"nic_id,omitempty"`

	// +kubebuilder:validation:Required
	VMID *string `json:"vmId" tf:"vm_id,omitempty"`
}

// LinkSpec defines the desired state of Link
type LinkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LinkParameters `json:"forProvider"`
}

// LinkStatus defines the observed state of Link.
type LinkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LinkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Link is the Schema for the Links API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type Link struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LinkSpec   `json:"spec"`
	Status            LinkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LinkList contains a list of Links
type LinkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Link `json:"items"`
}

// Repository type metadata.
var (
	Link_Kind             = "Link"
	Link_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Link_Kind}.String()
	Link_KindAPIVersion   = Link_Kind + "." + CRDGroupVersion.String()
	Link_GroupVersionKind = CRDGroupVersion.WithKind(Link_Kind)
)

func init() {
	SchemeBuilder.Register(&Link{}, &LinkList{})
}
