/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PublicIpObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LinkPublicIPID *string `json:"linkPublicIpId,omitempty" tf:"link_public_ip_id,omitempty"`

	NicAccountID *string `json:"nicAccountId,omitempty" tf:"nic_account_id,omitempty"`

	NicID *string `json:"nicId,omitempty" tf:"nic_id,omitempty"`

	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	PublicIP *string `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	PublicIPID *string `json:"publicIpId,omitempty" tf:"public_ip_id,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	VMID *string `json:"vmId,omitempty" tf:"vm_id,omitempty"`
}

type PublicIpParameters struct {

	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type TagsObservation struct {
}

type TagsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// PublicIpSpec defines the desired state of PublicIp
type PublicIpSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PublicIpParameters `json:"forProvider"`
}

// PublicIpStatus defines the observed state of PublicIp.
type PublicIpStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PublicIpObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PublicIp is the Schema for the PublicIps API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type PublicIp struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PublicIpSpec   `json:"spec"`
	Status            PublicIpStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PublicIpList contains a list of PublicIps
type PublicIpList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PublicIp `json:"items"`
}

// Repository type metadata.
var (
	PublicIp_Kind             = "PublicIp"
	PublicIp_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PublicIp_Kind}.String()
	PublicIp_KindAPIVersion   = PublicIp_Kind + "." + CRDGroupVersion.String()
	PublicIp_GroupVersionKind = CRDGroupVersion.WithKind(PublicIp_Kind)
)

func init() {
	SchemeBuilder.Register(&PublicIp{}, &PublicIpList{})
}
