/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LoadBalancerVmsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`
}

type LoadBalancerVmsParameters struct {

	// +crossplane:generate:reference:type=github.com/outscale-vbr/upjet-provider-outscale/apis/vm/v1alpha1.Vm
	// +kubebuilder:validation:Optional
	BackendVMIds []*string `json:"backendVmIds,omitempty" tf:"backend_vm_ids,omitempty"`

	// References to Vm in vm to populate backendVmIds.
	// +kubebuilder:validation:Optional
	BackendVMIdsRefs []v1.Reference `json:"backendVmIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Vm in vm to populate backendVmIds.
	// +kubebuilder:validation:Optional
	BackendVMIdsSelector *v1.Selector `json:"backendVmIdsSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	LoadBalancerName *string `json:"loadBalancerName" tf:"load_balancer_name,omitempty"`
}

// LoadBalancerVmsSpec defines the desired state of LoadBalancerVms
type LoadBalancerVmsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LoadBalancerVmsParameters `json:"forProvider"`
}

// LoadBalancerVmsStatus defines the observed state of LoadBalancerVms.
type LoadBalancerVmsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LoadBalancerVmsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LoadBalancerVms is the Schema for the LoadBalancerVmss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,upjet-provider-outscale}
type LoadBalancerVms struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LoadBalancerVmsSpec   `json:"spec"`
	Status            LoadBalancerVmsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LoadBalancerVmsList contains a list of LoadBalancerVmss
type LoadBalancerVmsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LoadBalancerVms `json:"items"`
}

// Repository type metadata.
var (
	LoadBalancerVms_Kind             = "LoadBalancerVms"
	LoadBalancerVms_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LoadBalancerVms_Kind}.String()
	LoadBalancerVms_KindAPIVersion   = LoadBalancerVms_Kind + "." + CRDGroupVersion.String()
	LoadBalancerVms_GroupVersionKind = CRDGroupVersion.WithKind(LoadBalancerVms_Kind)
)

func init() {
	SchemeBuilder.Register(&LoadBalancerVms{}, &LoadBalancerVmsList{})
}
